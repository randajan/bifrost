{
  "version": 3,
  "sources": ["<define:__slib_info>", "../../../node_modules/@randajan/simple-lib/src/tools/logger.js", "../../../node_modules/@randajan/simple-lib/src/info/index.js", "../../../node_modules/@randajan/simple-lib/src/node/index.js", "../src/index.js", "../../../src/server/tools.js", "../../../src/server/class/SocketsGroups.js", "../../../src/server/class/ServerBridge.js", "../../../src/server/index.js"],
  "sourcesContent": ["", "import chalkNative from \"chalk\";\r\n\r\nconst chalkProps = Object.getOwnPropertyNames(Object.getPrototypeOf(chalkNative)).filter(v=>v!==\"constructor\");\r\n\r\nclass Logger extends Function {\r\n    constructor(formater, chalkInit) {\r\n        super();\r\n        const chalk = chalkInit||chalkNative;\r\n\r\n        const log = (...msgs)=>{ console.log(chalk(formater(msgs))); }\r\n        const self = Object.setPrototypeOf(log.bind(), new.target.prototype);\r\n\r\n        for (const prop of chalkProps) {\r\n            Object.defineProperty(self, prop, { get: _=>new Logger(formater, chalk[prop]), enumerable:false });\r\n        }\r\n        \r\n        return self;\r\n    }\r\n}\r\n\r\nexport const logger = (...prefixes)=>{\r\n    const now = _=>(new Date()).toLocaleTimeString(\"cs-CZ\");\r\n    prefixes = prefixes.filter(v=>!!v).join(\" \");\r\n\r\n    return new Logger(msgs=>`${prefixes} | ${now()} | ${msgs.join(\" \")}`);\r\n}", "const enumerable = true;\r\nconst lockObject = o=>{\r\n    if (typeof o !== \"object\") { return o; }\r\n\r\n    const r = {};\r\n    for (const i in o) {\r\n        const descriptor = { enumerable };\r\n        let val = o[i];\r\n        if (val instanceof Array) { descriptor.get = _=>[...val]; }\r\n        else { descriptor.value = lockObject(val); }\r\n        Object.defineProperty(r, i, descriptor);\r\n    }\r\n\r\n    return r;\r\n}\r\n\r\nexport const info = lockObject(__slib_info);\r\nexport default info;", "import { parentPort } from \"worker_threads\";\r\nimport { info } from \"../info\";\r\nimport { logger } from \"../tools/logger\";\r\n\r\nexport default info;\r\n\r\nexport const log = logger(info.name, info.version, info.env);\r\n\r\nexport {\r\n    info,\r\n}\r\n\r\nparentPort.on(\"message\", msg=>{\r\n    if (msg===\"shutdown\") { process.exit(0); }\r\n});\r\n\r\nprocess.on('uncaughtException', e=>{\r\n  console.log(e.stack);\r\n});", "\nimport { info, log } from \"@randajan/simple-lib/node\";\n\nimport { createServer as createServerHTTP } from \"http\";\nimport { Server as IO } from \"socket.io\";\n\nimport ServerBridge from \"../../../dist/server\";\n\nconst http = createServerHTTP();\nhttp.listen(info.port+1);\n\nconst io = new IO(http, {\n    cors: {\n        origin: \"*\",\n        methods: [\"GET\", \"POST\"]\n      }\n});\n\nconst bridge = new ServerBridge(io);\n\nbridge.rx(\"test\", (socket, { msg })=>{\n    console.log(msg);\n\n    return \"msg accepted\";\n});\n", "export const emit = async (socket, channel, body)=>{\r\n    return new Promise((res, rej)=>{\r\n        socket.emit(channel, body, (ok, body)=>{\r\n            if (ok) { res(body); } else { rej(body); }\r\n        });\r\n    });\r\n}\r\n\r\nexport const hear = (socket, channel, receiver)=>{\r\n    socket.on(channel, async (body, ack)=>{\r\n        try { await ack(true, await receiver(socket, body)); }\r\n        catch(err) {\r\n            console.warn(err);\r\n            await ack(false, `BE > ${err}`);\r\n        }\r\n    });\r\n}\r\n\r\nexport const deaf = (socket, channel)=>{ socket.off(channel); }", "\r\nconst _privates = new WeakMap();\r\n\r\nexport class SocketGroups {\r\n\r\n    constructor(bridge, grouper) {\r\n\r\n        const byId = new Map();\r\n        const bySocket = new Map();\r\n\r\n        const remove = (fromId, socket)=>{\r\n            const from = byId.get(fromId);\r\n            from.delete(socket);\r\n            if (!from.size) { byId.delete(fromId); }\r\n            bySocket.delete(socket);\r\n        }\r\n\r\n        const add = (toId, socket)=>{\r\n            let to = byId.get(toId);\r\n            if (!to) { byId.set(toId, to = new Set()); }\r\n            to.add(socket);\r\n            bySocket.set(socket, toId);\r\n        }\r\n\r\n        const set = (fromId, socket)=>{\r\n            const toId = grouper(socket);\r\n            if (fromId === toId) { return; }\r\n            remove(fromId, socket);\r\n            add(toId, socket);\r\n        }\r\n\r\n        Object.defineProperty(this, \"bridge\", {\r\n            value:bridge, enumerable:true\r\n        });\r\n\r\n        bridge.io.on(\"connection\", socket=>{\r\n            add(grouper(socket), socket);\r\n            socket.on(\"disconnect\", _=>{ remove(bySocket.get(socket), socket); });\r\n        });\r\n\r\n        _privates.set(this, { byId, bySocket, remove, add, set });\r\n\r\n    }\r\n\r\n    reset() {\r\n        const { bySocket, set } = _privates.get(this);\r\n        bySocket.forEach(set);\r\n    }\r\n\r\n    get(id) {\r\n        const { byId } = _privates.get(this);\r\n        return byId.has(id) ? [...byId.get(id)] : [];\r\n    }\r\n\r\n    async tx(channel, transceiver, id) {\r\n        return this.bridge.tx(channel, transceiver, this.get(id));\r\n    }\r\n\r\n}", "import { deaf, emit, hear } from \"../tools\";\r\nimport { SocketGroups } from \"./SocketsGroups\";\r\n\r\nconst _privates = new WeakMap();\r\n\r\nconst enumerable = true;\r\nexport class ServerBridge {\r\n\r\n    constructor(io) {\r\n        const _p = {\r\n            channels:new Map(),\r\n            groups:new Map(),\r\n            sockets:new Set()\r\n        }\r\n\r\n        Object.defineProperties(this, {\r\n            io:{ enumerable, value:io },\r\n            sockets:{ enumerable, get:_=>[..._p.sockets] }\r\n        });\r\n\r\n        io.on(\"connection\", socket=>{\r\n            _p.sockets.add(socket);\r\n            _p.channels.forEach((receiver, channel)=>{ hear(socket, channel, receiver); });\r\n            socket.on(\"disconnect\", _=>{ _p.sockets.delete(socket); });\r\n        });\r\n\r\n        _privates.set(this, _p);\r\n\r\n    }\r\n\r\n    createGroup(name, grouper) {\r\n        const { groups } = _privates.get(this);\r\n        if (groups.has(name)) { throw Error(`Bridge group '${name}' allready exist!`); }\r\n        const group = new SocketGroups(this, grouper);\r\n        groups.set(name, group);\r\n        return group;\r\n    }\r\n\r\n    getGroup(name) {\r\n        const { groups } = _privates.get(this);\r\n        if (!groups.has(name)) { throw Error(`Bridge group '${name}' doesn't exist!`); }\r\n        return groups.get(name);\r\n    }\r\n\r\n    tx(channel, transceiver, sockets) {\r\n        const rnbl = typeof transceiver === \"function\";\r\n        if (!sockets) { sockets = this.sockets; }\r\n        return Promise.all(sockets.map(async socket=>{\r\n            return rnbl ? transceiver(body=>emit(socket, channel, body), socket) : emit(socket, channel, transceiver);\r\n        }));\r\n    }\r\n\r\n    rx(channel, receiver) {\r\n        const { channels, sockets } = _privates.get(this);\r\n        if (channels.has(channel)) { throw Error(`Bridge rx channel '${channel}' allready registered!`); }\r\n\r\n        channels.set(channel, receiver);\r\n        sockets.forEach(socket=>{ hear(socket, channel, receiver); });\r\n\r\n        return _=>{\r\n            channels.delete(channel);\r\n            sockets.forEach(socket=>{ deaf(socket, channel); });\r\n        }\r\n    }\r\n\r\n}", "import { ServerBridge } from \"./class/ServerBridge\";\r\n\r\nexport {\r\n    ServerBridge\r\n}\r\n\r\nexport default ServerBridge;\r\n"],
  "mappings": "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",
  "names": ["log", "body", "bridge", "_privates", "enumerable", "io"]
}
